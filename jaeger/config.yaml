service:
  extensions: [jaeger_storage, jaeger_query, healthcheckv2]
  pipelines:
    traces:
      receivers: [otlp]
      processors: [filter/drop_health,filter/drop_jeager, batch]
      exporters: [jaeger_storage_exporter, spanmetrics]
    metrics/spanmetrics:
      receivers: [spanmetrics]
      exporters: [prometheus]
  telemetry:
    resource:
      service.name: jaeger
    metrics:
      level: detailed
      readers:
        - pull:
            exporter:
              prometheus:
                host: 0.0.0.0
                port: 8888
    logs:
      level: DEBUG

extensions:
  jaeger_query:
    storage:
      traces: some_storage
      metrics: some_metrics_storage
  jaeger_storage:
    backends:
      some_storage:
        memory:
          max_traces: 100000
    metric_backends:
      some_metrics_storage:
        prometheus:
          endpoint: http://prometheus:9090
          normalize_calls: true
          normalize_duration: true
  healthcheckv2:
    endpoint: 0.0.0.0:13133

connectors:
  spanmetrics:

receivers:
  otlp:
    protocols:
      grpc:
      http:
        endpoint: "0.0.0.0:4318"

processors:
  filter/drop_health:
    error_mode: ignore
    spans:
      exclude:
        match_type: regexp
        attributes:
          - key: url.path
            value: "^/actuator/health(\\?.*)?$"
  filter/drop_jeager:
    error_mode: ignore
    spans:
      exclude:
        match_type: regexp
        attributes:
          - key: url.path
            value: "^/api/services/jaeger/(\\?.*)?$"
  batch:

exporters:
  jaeger_storage_exporter:
    trace_storage: some_storage
  prometheus:
    endpoint: "0.0.0.0:8889"

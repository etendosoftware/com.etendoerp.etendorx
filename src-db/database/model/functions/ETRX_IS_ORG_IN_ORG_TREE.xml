<?xml version="1.0"?>
  <database name="FUNCTION ETRX_IS_ORG_IN_ORG_TREE">
    <function name="ETRX_IS_ORG_IN_ORG_TREE" type="NUMERIC">
      <parameter name="p_org_id_to_check" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_org_id_base_tree" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_org_tree_direcction" type="NUMERIC" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[v_asc_ad_org_tree VARCHAR(32);
	v_des_ad_org_tree VARCHAR(32);
BEGIN
	-- base case
	IF (p_org_id_to_check = '0' AND p_org_tree_direcction <= 0) THEN
		RETURN 1;
	END IF;
	
	-- search in ancestors
    IF p_org_tree_direcction <= 0 THEN
        SELECT ad_parent_org_id INTO v_asc_ad_org_tree 
		FROM ad_org_tree 
		WHERE ad_org_id=p_org_id_base_tree AND ad_parent_org_id <> ad_org_id AND ad_parent_org_id=p_org_id_to_check;
		IF (v_asc_ad_org_tree IS NOT NULL) THEN
    		RETURN 1;
		END IF;
	END IF;
        
	-- search in descendants
	IF p_org_tree_direcction >= 0 THEN
		WITH RECURSIVE org_tree(ad_org_id, ad_parent_org_id) AS (
            SELECT ad_org_id, ad_parent_org_id
            FROM ad_org_tree
            WHERE ad_org_id = p_org_id_to_check AND ad_parent_org_id <> ad_org_id
            	UNION ALL
            SELECT a.ad_org_id, a.ad_parent_org_id
            FROM ad_org_tree a
            JOIN org_tree b ON a.ad_org_id = b.ad_parent_org_id
            WHERE a.ad_org_id <> p_org_id_to_check AND a.ad_parent_org_id <> a.ad_org_id
        )
		SELECT ad_org_id INTO v_des_ad_org_tree
        FROM org_tree
        WHERE ad_org_id <> p_org_id_to_check;
		IF (v_des_ad_org_tree IS NOT NULL) THEN
    		RETURN 1;
		END IF;
	END IF;
	
	RETURN 0;
END ETRX_IS_ORG_IN_ORG_TREE
]]></body>
    </function>
  </database>

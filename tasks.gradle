def ETENDORX_PRODUCTION_REPOSITORY_URL = "https://maven.pkg.github.com/etendosoftware/com.etendoerp.platform.extensions"
def ETENDORX_SNAPSHOT_REPOSITORY_URL = "https://repo.futit.cloud/repository/etendo-snapshot-jars"
project.ext {
    ETENDORX_VERSION = "2.3.1"
}

def isRXDockerized() {
    return project.hasProperty("docker_com.etendoerp.etendorx") && project.property("docker_com.etendoerp.etendorx").toBoolean()
}

task "rx.setup" {
        if (isRXDockerized()) {
        description = 'Finds all Docker Compose YAML files and copies them to build/compose'
        group = 'Docker'

        doLast {
            println("Copying RX config files")
            // Ensure the destination directory exists
            def destDir = layout.buildDirectory.dir("rxconfig").get().asFile
            if (!destDir.exists()) {
                destDir.mkdirs()
            }

            def dirs = ['modules', layout.buildDirectory.dir("etendo/modules").get().asFile]
            dirs.each { dir ->
                // Collect .yaml and .yaml.template files
                def yamlFiles = fileTree(dir: dir, include: '**/rxconfig/*.yaml').collect { it.name }
                def templateFiles = fileTree(dir: dir, include: '**/rxconfig/*.yaml.template')

                templateFiles.each { template ->
                    def yamlName = template.name.replace('.template', '')
                    def destFile = new File(destDir, yamlName)

                    // If the .yaml file doesn't exist, use the template to generate it
                    if (!yamlFiles.contains(yamlName)) {
                        println("Using template for missing file: ${yamlName}")
                        copy {
                            from template
                            into destDir
                            rename { it.replace('.template', '') }
                        }
                    } else {
                        // If the .yaml file exists, copy it directly
                        println("Using existing .yaml file: ${yamlName}")
                        copy {
                            from new File(template.parent, yamlName)
                            into destDir
                        }
                    }
                    def content = destFile.text
                    content = content.replace('{TOMCAT_URL}', isTomcatEnabled ? 'tomcat' : 'host.docker.internal')
                    content = content.replace('{BBDD_URL}', isBBDDEnabled ? 'db' : 'host.docker.internal')
                    content = content.replace('{BBDD_PORT}', isBBDDEnabled ? '5432' : project.property("bbdd.port").toString())
                    content = content.replace('{BBDD_SID}', project.property("bbdd.sid").toString())
                    content = content.replace('{CONTEXT_NAME}', project.property("context.name").toString())
                    content = content.replace('{ETENDORX_BASEPACKAGE}', project.hasProperty("etendorx.basepackage") ? project.property("etendorx.basepackage").toString() : "")
                    content = content.replace('{OBCON_URL}', isTomcatEnabled ? 'obconnsrv' : 'host.docker.internal')
                    destFile.text = content
                }
            }
            executeDockerComposeCommand("cp ${destDir} config:/")
        }
    }
}

task "rx.env.file" {
    description = 'Generates the .env file for RX'
    group = 'Docker'

    doLast {
        def props = envFile()
        def env = props.envFile
        def properties = props.properties
        env.withWriterAppend { writer ->
            writer.write("ETENDORX_VERSION=${project.ext.ETENDORX_VERSION}\n")
            if ("${ETENDORX_VERSION}".contains("SNAPSHOT")) {
                writer.write("ETENDORX_REPOSITORY_URL=${ETENDORX_SNAPSHOT_REPOSITORY_URL}\n")
                writer.write("ETENDORX_REPOSITORY_USER=${properties.getProperty("nexusUser")}\n")
                writer.write("ETENDORX_REPOSITORY_PASSWORD=${properties.getProperty("nexusPassword")}\n")
            } else {
                writer.write("ETENDORX_REPOSITORY_URL=${ETENDORX_PRODUCTION_REPOSITORY_URL}\n")
                writer.write("ETENDORX_REPOSITORY_USER=${properties.getProperty("githubUser")}\n")
                writer.write("ETENDORX_REPOSITORY_PASSWORD=${properties.getProperty("githubToken")}\n")
            }
            def destUrl = isBBDDEnabled ? "db" : "host.docker.internal"
            def port = isBBDDEnabled ? "5432" : project.property("bbdd.port")
            def sid = project.hasProperty("bbdd.sid") ? project.property("bbdd.sid") : "etendo"
            def contextName = project.hasProperty("context.name") ? project.property("context.name") : "etendo"
            writer.write("ETENDORX_DB_HOST=${destUrl}\n")
            writer.write("ETENDORX_DB_PORT=${port}\n")
            writer.write("ETENDORX_DB_SID=${sid}\n")

            def tomcatHost = "tomcat"
            def tomcatPort = "8080"
            if (!isTomcatEnabled) {
                tomcatHost = "host.docker.internal"
                if (project.hasProperty("docker_com.etendoerp.tomcat_port")) {
                    tomcatPort = project.property("docker_com.etendoerp.tomcat_port").toString()
                }
            }
            def configServerUrl = "http://${tomcatHost}:${tomcatPort}/${contextName}/buildConfig"
            writer.write("ETENDORX_CONFIG_SERVER_URL=${configServerUrl}\n")
        }
    }
}

task "rx.das.restart" {
    dependsOn "rx.setup"
    doLast {
        if (isRXDockerized()) {
            executeDockerComposeCommand("restart das")
        }
    }
}

task "rx.das.stop" {
    doLast {
        if (isRXDockerized()) {
            executeDockerComposeCommand("stop das")
        }
    }
}

task "kafkaConnectSetup" {
    def connectorName = "default"
    def dbUser = project.hasProperty('bbdd.systemUser') ? project.getProperty('bbdd.systemUser') : 'postgres'
    def dbName = project.hasProperty('bbdd.sid') ? project.getProperty('bbdd.sid') : 'etendo'
    def dbPass = project.hasProperty('bbdd.systemPassword') ? project.getProperty('bbdd.systemPassword') : 'syspass'

    if (!project.hasProperty('KAFKA_CONNECT_TABLES')) {
        throw new GradleException("You must specify the KAFKA_CONNECT_TABLES property.")
    }
    def tableIncludeList = project.getProperty('KAFKA_CONNECT_TABLES')

    doLast {
        println "📡 Checking Kafka Connect for connector '$connectorName'..."

        def configBody = """
        {
            "connector.class": "io.debezium.connector.postgresql.PostgresConnector",
            "topic.prefix": "${connectorName}",
            "database.user": "${dbUser}",
            "database.dbname": "${dbName}",
            "database.hostname": "db",
            "database.password": "${dbPass}",
            "name": "${connectorName}",
            "table.include.list": "${tableIncludeList}",
            "plugin.name": "pgoutput",
            "key.converter": "org.apache.kafka.connect.json.JsonConverter",
            "key.converter.schemas.enable": "false",
            "value.converter": "org.apache.kafka.connect.json.JsonConverter",
            "value.converter.schemas.enable": "false",
            "snapshot.mode": "no_data"
        }
        """.stripIndent().replaceAll('\n', '').replaceAll(' +', ' ')

        def postBody = """
        {
            "name": "${connectorName}",
            "config": ${configBody}
        }
        """

        def checkProcess = ['curl', '-s', '-o', '/dev/null', '-w', '%{http_code}', "http://localhost:8083/connectors/${connectorName}"].execute()
        def statusCode = checkProcess.text.trim()

        def method = statusCode == "200" ? "PUT" : "POST"
        def url = statusCode == "200" ?
                "http://localhost:8083/connectors/${connectorName}/config" :
                "http://localhost:8083/connectors"

        def bodyToSend = (method == "PUT") ? configBody : postBody

        println "→ Connector $connectorName ${statusCode == '200' ? 'exists' : 'does not exist'}, doing $method"

        def command = [
                'curl', '--silent', '--show-error', '--fail',
                '--request', method,
                '--url', url,
                '--header', 'Content-Type: application/json',
                '--data', bodyToSend
        ]

        def process = command.execute()
        def output = new StringWriter()
        def error = new StringWriter()
        process.consumeProcessOutput(output, error)
        def exitCode = process.waitFor()

        if (exitCode != 0) {
            throw new GradleException("❌ Kafka Connect setup failed:\nSTDOUT: ${output}\nSTDERR: ${error}")
        } else {
            println "✅ Kafka Connect $method completed.\n"
        }
    }
}

afterEvaluate {
    if (isRXDockerized() && tasks.hasProperty("generateEnvFile")) {
        tasks.named("generateEnvFile").configure { task ->
            task.finalizedBy("rx.env.file")
        }
        tasks.named("resources.up").configure { task ->
            task.finalizedBy("rx.setup")
        }
        tasks.named("update.database").configure { task ->
            task.dependsOn("rx.das.stop")
        }
        tasks.named("smartbuild").configure { task ->
            task.finalizedBy("rx.das.restart")
        }
    }
}

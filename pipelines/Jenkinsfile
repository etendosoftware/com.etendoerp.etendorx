pipeline {
    options {
        disableConcurrentBuilds()
    }

    environment {
        CONTEXT_NAME        = 'etendo'
        BBDD_SID            = 'etendo'
        BBDD_PORT           = '5432'
        BBDD_SYSTEMUSER     = 'postgres'
        BBDD_SYSTEMPASS     = 'syspass'
        BBDD_USER           = 'tad'
        BBDD_PASSWORD       = 'tad'
        NEXUS_USER          = credentials('nexus-admin-user')
        NEXUS_PASSWORD      = credentials('nexus-admin-passwd')
        GITHUB_USER         = 'etendobot'
        GITHUB_TOKEN        = credentials('github-read-package-token')
        JAVA_HOME           = '/opt/java/openjdk/'
        ACCESS_TOKEN        = credentials('access_token_github')
        EMAIL_ADDRESS       = 'roman.magnoli@etendo.software'
        CORE_URL_REPO       = 'https://github.com/etendosoftware/etendo_core'
        RX_URL_REPO         = 'https://github.com/etendosoftware/etendo_rx'
        COMMIT_AUTHOR_NAME  = sh(returnStdout: true, script: "git log -1 --pretty=format:'%an'").trim()
        COMMIT_AUTHOR_EMAIL = sh(returnStdout: true, script: "git log -1 --pretty=format:'%ae'").trim()
        CATALINA_HOME       = '${WORKSPACE}/apache-tomcat-8.5.75'
        STATUSCORE          = '1'
        BUILD_CLASSIC       = true
        DOCKER_HOST         = '/home/jenkins/docker.sock'
        DOCKER_TLS_VERIFY   = 0
        REPOSITORY_NAME     = 'com.etendoerp.etendorx'
        CONTEXT_BUILD       = 'Module Tests'

        COMMIT_INPROGRESS_STATUS = 'pending'
        COMMIT_SUCCESS_STATUS    = 'success'
        COMMIT_FAILED_STATUS     = 'failure'
        
    }

    agent {
        kubernetes {
            label 'jenkins-node-rx'
            defaultContainer 'jnlp'
            yaml """
apiVersion: v1
kind: Pod
metadata:
  name: jenkins-node-core-unittests-rx
  namespace: jenkins
  labels:
    app.kubernetes.io/name: jenkins-node-core-unittests-rx
spec:
  containers:
    - name: compiler
      image: etendo/compiler_jenkins:1.0.7
      ports:
        - name: ssh
          containerPort: 22
          protocol: TCP
        - name: visualvm
          containerPort: 8000
          protocol: TCP
      resources:
        limits:
          cpu: 3072m
          memory: 5000Mi
        requests:
          cpu: 3072m
          memory: 5000Mi
      volumeMounts:
        - name: rsa-keys
          mountPath: /root/.ssh/
        - name: docker-sock
          mountPath: /var/run/docker.sock
      lifecycle:
        postStart:
          exec:
            command:
              - bash
              - '-c'
              - >-
                chmod a+x /var/run/docker.sock && rm
                /etc/apt/sources.list.d/pgdg.list || echo 0 && apt update && apt
                install -y curl
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      imagePullPolicy: IfNotPresent
    - name: postgres
      image: postgres:14
      workingDir: /home/jenkins
      env:
        - name: POSTGRES_PASSWORD
          value: syspass
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      imagePullPolicy: IfNotPresent
  volumes:
    - name: rsa-keys
      configMap:
        name: rsa-keys
        defaultMode: 384
    - name: docker-sock
      hostPath:
        path: /var/run/docker.sock
  restartPolicy: Always
  terminationGracePeriodSeconds: 30
  dnsPolicy: ClusterFirst
  serviceAccountName: default
  serviceAccount: default
  securityContext:
    privileged: true

"""
        }
    }
    stages {
        stage ('Test environment') {
            steps {
                container('compiler') {
                    script {
                        try {
                            echo "Starting Environment tests"
                            sh "./pipelines/utils/build-update.sh ${REPOSITORY_NAME} ${GIT_COMMIT} ${BUILD_NUMBER} ${COMMIT_INPROGRESS_STATUS} \"${CONTEXT_BUILD}\" ${BUILD_URL} \"Starting Build\" ${OWNER_REPOSITORY} ${USER_ACCESS} ${ACCESS_TOKEN}"
                            sh """
                            export DOCKER_HOST=/var/run/docker.sock
                            export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
                            git clone --branch $BRANCH_NAME ${RX_URL_REPO}
                            cd etendo_rx
                            cp gradle.properties.template gradle.properties
                            sed -i 's/^githubUser=.*/githubUser=${GITHUB_USER}/' gradle.properties
                            sed -i 's/^githubToken=.*/githubToken=${GITHUB_TOKEN}/' gradle.properties
                            sed -i 's/^grpc.enabled=.*/grpc.enabled=true/' gradle.properties
                            sed -i 's/^data-rest.enabled=.*/data-rest.enabled=true/' gradle.properties
                            mkdir -p modules
                            ./gradlew :setup
                            """
                            '...Environment TESTS SUCCESSFUL...'
                        } catch (Exception e) {
                            echo 'Exception occurred: ' + e.toString()
                            echo '...Environment TEST FAILED...'
                            currentBuild.result = 'UNSTABLE'
                            unstable('Environment TESTS FAILED!')
                            env.STATUSTEST = "0"
                        }
                    }
                }
            }
        }
        stage ('Build Environment Etendo Core') {
            when {
                expression {
                    env.BUILD_CLASSIC == "true"
                }
            }
            steps {
                withCredentials([sshUserPrivateKey(credentialsId: 'my-credentials', keyFileVariable: 'keyfile')]) {
                    withCredentials([usernamePassword(credentialsId: "koodu_credentials", passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
                        sh 'mkdir -p ~/.ssh && ssh-keyscan bitbucket.org >> ~/.ssh/known_hosts'
                        sh """
                        git config user.name "$GIT_USERNAME"
                        git config user.email "$GIT_USERNAME"
                        """

                        // Clone Etendo Core
                        sh 'GIT_SSH_COMMAND=\"ssh -i ${keyfile}\" git clone --branch develop git@github.com:etendosoftware/etendo_core.git etendo_core'

                        // Setup environment
                        sh 'printenv'
                        script {
                            try {
                                echo 'Building Etendo Core'
                                dir("etendo_core") {
                                    sh """
                                    echo -e "context.name=${CONTEXT_NAME}\n
                                    bbdd.sid=${BBDD_SID}\n
                                    bbdd.port=${BBDD_PORT}\n
                                    bbdd.systemUser=${BBDD_SYSTEMUSER}\n
                                    bbdd.systemPassword=${BBDD_SYSTEMPASS}\n
                                    bbdd.user=${BBDD_USER}\n
                                    bbdd.password=${BBDD_PASSWORD}\n
                                    nexusUser=${NEXUS_USER}\n
                                    nexusPassword=${NEXUS_PASSWORD}\n
                                    githubUser=${GITHUB_USER}\n
                                    githubToken=${GITHUB_TOKEN}\n
                                    allow.root=true\n
                                    org.gradle.jvmargs=-Dfile.encoding=UTF-8" > gradle.properties
                                    """
                                    sh './gradlew prepareConfig --info --stacktrace'
                                    sh './gradlew setup --info --stacktrace'
                                    sh './gradlew expandModules --info --stacktrace'
                                    sh """
                                    cd modules
                                    GIT_SSH_COMMAND=\"ssh -i ${keyfile}\" git clone git@bitbucket.org:koodu_software/com.etendoerp.etendorx.git
                                    cd com.etendoerp.etendorx
                                    git checkout epic/EE-537
                                    cd ../..
                                    """
                                    sh './gradlew install --info --stacktrace'
                                    sh './gradlew smartbuild --info --stacktrace'
                                    echo 'Build of Etendo Core Finished'
                                    env.STATUSCORE = "1"
                                    env.STATUSRX = "0"
                                }
                            } catch (Exception e) {
                                echo 'Build of Etendo Core FAILED'
                                currentBuild.result = 'FAILED'
                                error('Build Etendo Core FAILED!')
                                env.STATUSCORE = "0"
                            }
                        }
                    }
                }
            }
        }
        stage ('Build Environment Etendo RX') {
            when {
                expression {
                    env.STATUSCORE == "1"
                }
            }
            steps {
                container('compiler') {
                    script {
                        try {
                            echo 'Building Etendo RX'
                            sh 'printenv'
                            sh """
                            export DOCKER_HOST=/var/run/docker.sock
                            export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
                            cd etendo_rx
                            ./gradlew generate.entities --info
                            """
                            echo 'Build of Etendo RX Finished'
                            env.STATUSRX = "1"
                        } catch (Exception e) {
                            echo 'Build of Etendo RX FAILED'
                            currentBuild.result = 'FAILED'
                            error('Build of Etendo RX FAILED!')
                            env.STATUSRX = "0"
                        }
                    }
                }
            }
        }
        stage ("Run Etendo RX module tests") {
            when {
                expression {
                    false
                }
            }
            steps {
                script {
                    try {
                        env.STATUSTEST = "1"
                        echo "Starting Etendo RX module tests"
                        sh """
                        cd etendo_rx
                        ./gradlew test --tests "com.etendoerp.etendorx.*" --info
                        """
                        '...ETENDO RX MODULE TESTS SUCCESSFUL...'
                    } catch (Exception e) {
                        echo 'Exception occurred: ' + e.toString()
                        echo '...ETENDO RX MODULE TESTS FAILED...'
                        currentBuild.result = 'UNSTABLE'
                        unstable('ETENDO RX MODULE TESTS FAILED!')
                        env.STATUSTEST = "0"
                    }
                    publishHTML([
                        allowMissing: false,
                        alwaysLinkToLastBuild: false,
                        keepAll: true,
                        reportDir: 'etendo_core/build/reports/tests/test',
                        reportFiles: '*.html',
                        reportName: 'ETENDO RX MODULE TESTS REPORT',
                        reportTitles: ''
                    ])
                }
            }
        }
    }
    post {
            always {
                script {
                    echo"proccess is done"
                }
            }
            fixed {
                mail to: EMAIL_ADDRESS,
                subject: "✅ FIXED - ${currentBuild.fullDisplayName}",
                body: """
    ${new Date()}
    __________________________________________________________

    ✅ ERRORS FIXED ✅

    Commit: ${URL_REPO}/commit/${env.GIT_COMMIT}
    Author: ${COMMIT_AUTHOR_NAME} <${COMMIT_AUTHOR_EMAIL}>

    The problems found in the previous run/s have been fixed! 💪
    Check out the output in the following link:
    ${env.BUILD_URL}
    __________________________________________________________
                """
            }
            failure {
                script {
                    sh 'chmod a+x ./pipelines/run-tests/build-update.sh'
                    sh './pipelines/run-tests/build-update.sh etendo_rx failure "Failed Build Environments" $ACCESS_TOKEN $GIT_COMMIT $BUILD_URL'
                    echo "Failed Build Environments"
                }
                cleanWs deleteDirs: true
                mail to: EMAIL_ADDRESS,
                subject: "⛔ ERROR - ${currentBuild.fullDisplayName}",
                body:  """
    ${new Date()}
    __________________________________________________________

    ⛔ ERROR ⛔

    Commit: ${URL_REPO}/commit/${env.GIT_COMMIT}
    Author: ${COMMIT_AUTHOR_NAME} <${COMMIT_AUTHOR_EMAIL}>

    The build has failed unexpectedly.
    💡 This build was on an Etendo Core environment.
    To more information on the failing run visit:
    ${env.BUILD_URL}
    __________________________________________________________
                """
            }
            unstable {
                script {
                    sh 'chmod a+x ./pipelines/run-tests/build-update.sh'
                    sh './pipelines/run-tests/build-update.sh etendo_rx failure "Failed Tests" $ACCESS_TOKEN $GIT_COMMIT $BUILD_URL'
                    echo "Failed Test"
                }
                cleanWs deleteDirs: true
                mail to: EMAIL_ADDRESS,
                subject: "⚠️ TESTS FAILED - ${currentBuild.fullDisplayName}",
                body: """
    ${new Date()}
    __________________________________________________________

    ⚠️ BUILD UNSTABLE ⚠️

    Commit: ${URL_REPO}/commit/${env.GIT_COMMIT}
    Author: ${COMMIT_AUTHOR_NAME} <${COMMIT_AUTHOR_EMAIL}>

    Tests have been detected that have failed in Etendo RX.
    💡 These tests were run on a Postgres database environment.
    To more information on the failing run visit:
    ${env.BUILD_URL}
    __________________________________________________________
                """
            }
            success {
                script {
                    sh 'chmod a+x ./pipelines/run-tests/build-update.sh'
                    sh './pipelines/run-tests/build-update.sh etendo_rx success "Successful Test Suites" $ACCESS_TOKEN $GIT_COMMIT $BUILD_URL'
                    echo "Successful Test"
                }
                cleanWs deleteDirs: true
            }
        }
}
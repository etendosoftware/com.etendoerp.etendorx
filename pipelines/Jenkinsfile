pipeline {
    options {
        disableConcurrentBuilds()
    }

    environment { // MARK: - Environment Variables
        CONTEXT_NAME        = 'etendo'
        BBDD_SID            = 'etendo'
        BBDD_PORT           = '5432'
        BBDD_SYSTEMUSER     = 'postgres'
        BBDD_SYSTEMPASS     = 'syspass'
        BBDD_USER           = 'tad'
        BBDD_PASSWORD       = 'tad'
        NEXUS_USER          = credentials('nexus-admin-user')
        NEXUS_PASSWORD      = credentials('nexus-admin-passwd')
        GITHUB_USER         = 'etendobot'
        GITHUB_TOKEN        = credentials('github-read-package-token')
        
        ACCESS_TOKEN        = credentials('access_token_github')

        REPOSITORY_NAME     = 'com.etendoerp.etendorx'

        EMAIL_ADDRESS       = credentials('email_builds')
        CORE_URL_REPO       = 'https://github.com/etendosoftware/etendo_core'
        RX_URL_REPO         = 'https://github.com/etendosoftware/etendo_rx'
        URL_REPO            = 'https://github.com/etendosoftware/com.etendoerp.etendorx'
        RX_MODULE_SSH       = 'git@github.com:etendosoftware/com.etendoerp.etendorx.git'
        BRANCH_NAME_RX      = 'develop'
        RX_DIR              = 'etendo_rx'
        CLASSIC_DIR         = 'etendo_core'
        CORE_BRANCH         = 'develop'
        
        COMMIT_AUTHOR_NAME  = sh(returnStdout: true, script: "git log -1 --pretty=format:'%an'").trim()
        COMMIT_AUTHOR_EMAIL = sh(returnStdout: true, script: "git log -1 --pretty=format:'%ae'").trim()

        JAVA_HOME           = '/usr/lib/jvm/java-17-openjdk-amd64'
        BUILD_CLASSIC       = true

        CONTEXT_BUILD       = 'Module Tests'
        STATUSCORE          = '1'

        COMMIT_INPROGRESS_STATUS = "pending"
        COMMIT_SUCCESS_STATUS    = "success"
        COMMIT_FAILED_STATUS     = "failure"

        SUCCESS             = 'SUCCESS'
        FAILED              = 'FAILED'
        UNSTABLE            = 'UNSTABLE'

        SONAR_SERVER        = "https://sonar.etendo.cloud"
        SONAR_TOKEN         = credentials('sonar-token-access')

        TRUE                = 'true'
        FALSE               = 'false'
    }

    agent { // MARK: - Agent
        kubernetes {
            inheritFrom 'jenkins-node-rx'
            defaultContainer 'jnlp'
            yaml """
apiVersion: v1
kind: Pod
metadata:
  name: jenkins-node
  namespace: jenkins
  labels:
    app.kubernetes.io/name: jenkins-node
spec:
  containers:
    - name: compiler
      image: etendo/compiler_jenkins:1.0.7
      ports:
        - name: ssh
          containerPort: 22
          protocol: TCP
        - name: visualvm
          containerPort: 8000
          protocol: TCP
      resources:
        limits:
          cpu: 3072m
          memory: 5000Mi
        requests:
          cpu: 3072m
          memory: 5000Mi
      volumeMounts:
        - name: rsa-keys
          mountPath: /root/.ssh/
        - name: docker-sock
          mountPath: /var/run/docker.sock
      lifecycle:
        postStart:
          exec:
            command:
              - bash
              - '-c'
              - >-
                chmod a+x /var/run/docker.sock && rm
                /etc/apt/sources.list.d/pgdg.list || echo 0 && apt update && apt
                install -y curl
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      imagePullPolicy: IfNotPresent
    - name: postgres
      image: postgres:14
      workingDir: /home/jenkins
      env:
        - name: POSTGRES_PASSWORD
          value: syspass
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      imagePullPolicy: IfNotPresent
  volumes:
    - name: rsa-keys
      configMap:
        name: rsa-keys
        defaultMode: 384
    - name: docker-sock
      hostPath:
        path: /var/run/docker.sock
  restartPolicy: Always
  terminationGracePeriodSeconds: 30
  dnsPolicy: ClusterFirst
  serviceAccountName: default
  serviceAccount: default
  securityContext:
    privileged: true

"""
        }
    }
    stages { // MARK: - Stages
        stage ('RX Setup') { // MARK: - RX Setup
            steps {
                container('compiler') {
                    script {
                        try {
                            echo "---------------------- Clonning RX Repo ----------------------"
                            sh "./pipelines/utils/build-update.sh ${REPOSITORY_NAME} ${COMMIT_INPROGRESS_STATUS} \"RX Setup\" ${ACCESS_TOKEN} ${GIT_COMMIT} ${BUILD_URL} \"${CONTEXT_BUILD}\""

                            echo "---------------------- Setup RX Repo ----------------------"
                            sh """
                            git clone --branch ${BRANCH_NAME_RX} ${RX_URL_REPO}
                            cd ${RX_DIR}
                            cp gradle.properties.template gradle.properties
                            sed -i 's/^githubUser=.*/githubUser=${GITHUB_USER}/' gradle.properties
                            sed -i 's/^githubToken=.*/githubToken=${GITHUB_TOKEN}/' gradle.properties
                            sed -i 's/^grpc.enabled=.*/grpc.enabled=true/' gradle.properties
                            sed -i 's/^data-rest.enabled=.*/data-rest.enabled=true/' gradle.properties
                            echo "\nrx.checkModuleVersion=false" >> gradle.properties
                            ./gradlew :setup
                            """
                            echo "---------------------- Setting up Environment Variables ----------------------"
                            env.EXIST_JACOCO_REPORT = FALSE
                            env.STATUSTEST = "1"
                            env.STATUSRX = "1"

                            echo "---------------------- Clone and Setup RX Repo Successful ----------------------"
                            currentBuild.result = SUCCESS
                        } catch (Exception e) {
                            echo "---------------------- Clone and Setup RX Repo Failed ----------------------"
                            echo 'Exception occurred: ' + e.toString()
                            currentBuild.result = FAILED
                            error('Clone and Setup RX Repo Failed')
                            env.STATUSRX = "0"
                        }
                    }
                }
            }
        }
        stage ('Build Environment Etendo Core') { // MARK: - Build Environment Etendo Core
            when {
                expression {
                    env.BUILD_CLASSIC == TRUE && currentBuild.result == SUCCESS
                }
            }
            steps {
                container('compiler') {
                    script {
                        try {
                            sh "./pipelines/utils/build-update.sh ${REPOSITORY_NAME} ${COMMIT_INPROGRESS_STATUS} \"Build Environment Etendo Classic\" ${ACCESS_TOKEN} ${GIT_COMMIT} ${BUILD_URL} \"${CONTEXT_BUILD}\""
                            withCredentials([sshUserPrivateKey(credentialsId: 'my-credentials', keyFileVariable: 'keyfile')]) {
                                withCredentials([usernamePassword(credentialsId: "koodu_credentials", passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
                                    def sshCmd = "ssh -i ${keyfile} -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"

                                    echo "---------------------- Clonning Classic Repo ----------------------"
                                    sh "git clone --branch ${CORE_BRANCH} ${CORE_URL_REPO}"

                                    sh "printenv"
                                    echo "---------------------- Clonning RX Module Repo ----------------------"
                                    sh """
                                    cd ${CLASSIC_DIR}
                                    mkdir -p modules
                                    cd modules
                                    GIT_SSH_COMMAND=\"${sshCmd}\" git clone ${RX_MODULE_SSH}
                                    cd ${REPOSITORY_NAME}
                                    git checkout ${GIT_COMMIT}
                                    cd ../..
                                    """

                                    dir(CLASSIC_DIR) {
                                        env.WORKDIR_MODULE = "${pwd()}/modules/${REPOSITORY_NAME}"

                                        echo "--------------- Getting Sonar projectKey of ${REPOSITORY_NAME} ---------------"
                                        def propertiesContent = readFile "${WORKDIR_MODULE}/sonar-project.properties"
                                        def lines = propertiesContent.split('\n')
                                        def projectKey = ""
                                        lines.each { line ->
                                            if (line.startsWith('sonar.projectKey=')) {
                                            projectKey = line.split('=')[1]
                                            }
                                        }
                                        env.PROJECT_KEY = "${projectKey}"

                                        echo "---------------------- Setup Classic Repo ----------------------"
                                        sh """
                                        echo -e "context.name=${CONTEXT_NAME}\n
                                        bbdd.sid=${BBDD_SID}\n
                                        bbdd.port=${BBDD_PORT}\n
                                        bbdd.systemUser=${BBDD_SYSTEMUSER}\n
                                        bbdd.systemPassword=${BBDD_SYSTEMPASS}\n
                                        bbdd.user=${BBDD_USER}\n
                                        bbdd.password=${BBDD_PASSWORD}\n
                                        nexusUser=${NEXUS_USER}\n
                                        nexusPassword=${NEXUS_PASSWORD}\n
                                        githubUser=${GITHUB_USER}\n
                                        githubToken=${GITHUB_TOKEN}\n
                                        allow.root=true\n
                                        org.gradle.jvmargs=-Dfile.encoding=UTF-8
                                        sonarHostUrl=${SONAR_SERVER}
                                        sonarToken=${SONAR_TOKEN}
                                        sonarProjectBaseDir=${WORKDIR_MODULE}
                                        sonarProjectName=${REPOSITORY_NAME}
                                        sonarProjectKey=${PROJECT_KEY}
                                        sonarSources=src
                                        sonarBranchName=${GIT_BRANCH}
                                        sonarVersion=${GIT_COMMIT}" > gradle.properties
                                        """
                                        sh './gradlew prepareConfig --info --stacktrace'
                                        sh './gradlew setup --info --stacktrace'
                                        sh './gradlew expandModules --info --stacktrace'

                                        echo "---------------------- Building Classic Environment ----------------------"
                                        sh './gradlew install -PignoreConsistency=true --info --stacktrace'
                                        sh './gradlew smartbuild -PignoreConsistency=true --info --stacktrace'

                                        echo "---------------------- Classic Environment Successful ----------------------"
                                        currentBuild.result = SUCCESS
                                    }
                                }
                            }
                        } catch (Exception e) {
                            env.ERROR_MESSAGE = "Build of Classic Environment Failed"
                            echo "--------------- ${env.ERROR_MESSAGE} ---------------"
                            echo 'Exception occurred: ' + e.toString()
                            currentBuild.result = FAILED
                            error(env.ERROR_MESSAGE)
                        }
                    }
                }
            }
        }
        stage ('Build Environment Etendo RX') { // MARK: - Build Environment Etendo RX
            when {
                expression {
                    currentBuild.result == SUCCESS
                }
            }
            steps {
                container('compiler') {
                    script {
                        try {
                            sh "./pipelines/utils/build-update.sh ${REPOSITORY_NAME} ${COMMIT_INPROGRESS_STATUS} \"Build Environment Etendo RX\" ${ACCESS_TOKEN} ${GIT_COMMIT} ${BUILD_URL} \"${CONTEXT_BUILD}\""
                            echo "---------------------- Building Etendo RX Environment ----------------------"
                            sh """
                            cd ${RX_DIR}
                            ./gradlew generate.entities --info
                            """
                            echo "---------------------- Build of Etendo RX Successful ----------------------"
                            currentBuild.result = SUCCESS
                        } catch (Exception e) {
                            env.ERROR_MESSAGE = "Build of Etendo RX Failed"
                            echo "--------------- ${env.ERROR_MESSAGE} ---------------"
                            echo 'Exception occurred: ' + e.toString()
                            currentBuild.result = FAILED
                            error(env.ERROR_MESSAGE)
                            env.STATUSRX = "0"
                        }
                    }
                }
            }
        }
        stage ("Run Etendo RX Module tests") { // MARK: - Run Etendo RX Module tests
            when {
                expression {
                    currentBuild.result == SUCCESS
                }
            }
            steps {
                container('compiler') {
                    script {
                        try {
                            sh "./pipelines/utils/build-update.sh ${REPOSITORY_NAME} ${COMMIT_INPROGRESS_STATUS} \"Running Module Tests\" ${ACCESS_TOKEN} ${GIT_COMMIT} ${BUILD_URL} \"${CONTEXT_BUILD}\""

                            echo "---------------------- Starting Etendo RX Module Tests ----------------------"
                            sh """
                            cd ${CLASSIC_DIR}
                            ./gradlew test --tests "com.etendoerp.etendorx.*" jacocoRootReport --info
                            """
                            echo "---------------------- RX Module Tests Successful ----------------------"
                        } catch (Exception e) {
                            echo "---------------------- RX Module Tests Failed ----------------------"
                            echo 'Exception occurred: ' + e.toString()
                            currentBuild.result = UNSTABLE
                            unstable('RX Module Tests Failed')
                            env.STATUSTEST = "0"
                        }
                        publishHTML([
                            allowMissing: false,
                            alwaysLinkToLastBuild: false,
                            keepAll: true,
                            reportDir: "${CLASSIC_DIR}/build/reports/tests/test",
                            reportFiles: '*.html',
                            reportName: 'ETENDO RX MODULE TESTS REPORT',
                            reportTitles: ''
                        ])
                    }
                }
            }
        }
        stage('SonarQube Analysis') { // MARK: - SonarQube Analysis
            when {
                expression {
                    currentBuild.result == SUCCESS
                }
            }
            steps {
                script {
                    container('compiler') {
                        try {
                            sh "./pipelines/utils/build-update.sh ${REPOSITORY_NAME} ${COMMIT_INPROGRESS_STATUS} \"Running SonarQube Analysis\" ${ACCESS_TOKEN} ${GIT_COMMIT} ${BUILD_URL} \"${CONTEXT_BUILD}\""

                            echo "---------------------- Running SonarQube ----------------------"
                            sh """
                            cd ${CLASSIC_DIR}
                            ./gradlew sonar --stacktrace --info
                            """
                            echo "---------------------- Getting SonarQube Report URL ----------------------"
                            def branchName = URLEncoder.encode(GIT_BRANCH, 'UTF-8')
                            def projectUrl = "${SONAR_SERVER}/dashboard?id=${PROJECT_KEY}&branch=${branchName}"
                            env.PROJECT_URL = "${projectUrl}"
                            echo "Sonar Project URL: ${PROJECT_URL}"

                            echo "--------------- Execution SonarQube Succesful ---------------"
                        } catch (Exception e) {
                            env.ERROR_MESSAGE = "Execution SonarQube Failed"
                            echo "--------------- ${env.ERROR_MESSAGE} ---------------"
                            echo "Exception occurred: " + e.toString()
                            currentBuild.result = FAILED
                            error(env.ERROR_MESSAGE)
                        }
                    }
                }
            }
        }
        stage ("Run Das Tests") { // MARK: - Run Das Tests
            when {
                expression {
                    env.STATUSRX == "1"
                }
            }
            steps {
                container("compiler") {
                    script {
                        try {
                            sh "./pipelines/utils/build-update.sh ${REPOSITORY_NAME} ${COMMIT_INPROGRESS_STATUS} \"Running Das Tests\" ${ACCESS_TOKEN} ${GIT_COMMIT} ${BUILD_URL} \"${CONTEXT_BUILD}\""
                            echo "---------------------- Running Das Tests ----------------------"
                            def tests = [
                                "com.etendorx.das.test.RepositoryTest",
                                "com.etendorx.das.test.RestCallTest",
                                "com.etendorx.das.test.DefaultFiltersTest",
                                "com.etendorx.das.test.eventhandlertest.test.AnnotationTests",
                                "com.etendorx.das.unit.BindedRestControllerTest",
                                "com.etendorx.das.unit.JsonPathEntityRetrieverDefaultTest",
                                "com.etendorx.das.unit.MappingUtilsImplTest",
                                "com.etendorx.das.test.DisableEnableTriggersTest",
                                "com.etendorx.das.test.FieldMappingRestCallTest",
                                "com.etendorx.das.integration.PropertyMetadataTest",
                                "com.etendorx.das.unit.BaseDTORepositoryDefaultTests",
                                "com.etendorx.das.unit.JsonPathConverterBaseTests",
                                "com.etendorx.entities.mapper.lib.JsonPathEntityRetrieverBaseTests"
                            ]
                            dir(RX_DIR) {
                                tests.each { test ->
                                    sh "./gradlew :com.etendorx.das:test --info --tests ${test}"
                                }
                            }
                            echo "---------------------- Das Tests Successful ----------------------"
                        } catch (Exception e) {
                            echo "---------------------- Das Tests Failed ----------------------"
                            echo 'Exception occurred: ' + e.toString()
                            currentBuild.result = UNSTABLE
                            unstable('Das Tests Failed')
                            env.STATUSTEST = "0"
                        }
                        if(fileExists("${RX_DIR}/modules_core/com.etendorx.das/build/reports/tests/test")) {
                            publishHTML([
                                allowMissing: false,
                                alwaysLinkToLastBuild: false,
                                keepAll: true,
                                reportDir: "${RX_DIR}/modules_core/com.etendorx.das/build/reports/tests/test",
                                reportFiles: '*.html',
                                reportName: 'DAS TESTS REPORT',
                                reportTitles: ''
                            ])
                        }
                    }
                }
            }
        }
    }
    post { // MARK: - Post Actions
        fixed {
            mail to: EMAIL_ADDRESS,
            subject: "✅ FIXED - ${currentBuild.fullDisplayName}",
            mimeType: "text/html",
            body: """
            <html>
                <head>
                    <style>
                        body { font-family: 'Arial', sans-serif; }
                        .header { font-size: 16px; font-weight: bold; color: #333; }
                    </style>
                </head>
                <body>
                    <p><em>${new Date()}</em></p>
                    <p>__________________________________________________________</p>

                    <h2 class="header">✅ ERRORS FIXED ✅</h2>

                    <p>
                        <strong>Commit:</strong> <a href="${URL_REPO}/commits/${env.GIT_COMMIT}">${URL_REPO}/commits/${env.GIT_COMMIT}</a><br />
                        <strong>Author:</strong> ${COMMIT_AUTHOR_NAME} (${COMMIT_AUTHOR_EMAIL})
                    </p>
                    <p>
                        The build has been fixed.<br />
                        💡 This build was on an Full Etendo (CORE and RX) build environment based on RX module commit.<br />
                        For more information about the run, visit:<br />
                        <a href="${env.BUILD_URL}">${env.BUILD_URL}</a>
                    </p>
                    <p>__________________________________________________________</p>
                </body>
            </html>
            """
        }
        failure {
            script {
                sh "./pipelines/utils/build-update.sh ${REPOSITORY_NAME} ${COMMIT_FAILED_STATUS} \"Build Failed\" ${ACCESS_TOKEN} ${GIT_COMMIT} ${BUILD_URL} \"${CONTEXT_BUILD}\""
                echo "---------------------- Failed Build Environments ----------------------"
                echo "Failed Build Environments"
            }
            mail to: EMAIL_ADDRESS,
            subject: "⛔ ERROR - ${currentBuild.fullDisplayName}",
            mimeType: "text/html",
            body:  """
            <html>
                <head>
                    <style>
                        body { font-family: 'Arial', sans-serif; }
                        .header { font-size: 16px; font-weight: bold; color: #333; }
                    </style>
                </head>
                <body>
                    <p><em>${new Date()}</em></p>
                    <p>__________________________________________________________</p>

                    <h2 class="header">🚫 BUILD FAILED 🚫</h2>

                    <p>
                        <strong>Commit:</strong> <a href="${URL_REPO}/commits/${env.GIT_COMMIT}">${URL_REPO}/commits/${env.GIT_COMMIT}</a><br />
                        <strong>Author:</strong> ${COMMIT_AUTHOR_NAME} (${COMMIT_AUTHOR_EMAIL})
                    </p>
                    <p>
                        The build has failed unexpectedly.<br />
                        💡 This build was on an Full Etendo (CORE and RX) build environment based on RX module commit.<br />
                        To more information on the failing run visit:<br />
                        <a href="${env.BUILD_URL}">${env.BUILD_URL}</a>
                    </p>
            __________________________________________________________
            """
        }
        unstable {
            script {
                sh "./pipelines/utils/build-update.sh ${REPOSITORY_NAME} ${COMMIT_FAILED_STATUS} \"Test Execution Failed\" ${ACCESS_TOKEN} ${GIT_COMMIT} ${BUILD_URL} \"${CONTEXT_BUILD}\""
                echo "---------------------- Failed Tests ----------------------"
            }
            mail to: EMAIL_ADDRESS,
            subject: "⚠️ TESTS FAILED - ${currentBuild.fullDisplayName}",
            mimeType: "text/html",
            body: """
            <html>
                <head>
                    <style>
                        body { font-family: 'Arial', sans-serif; }
                        .header { font-size: 16px; font-weight: bold; color: #333; }
                    </style>
                </head>
                <body>
                    <p><em>${new Date()}</em></p>
                    <p>__________________________________________________________</p>

                    <h2 class="header">🚨 BUILD UNSTABLE 🚨</h2>

                    <p>
                        <strong>Commit:</strong> <a href="${URL_REPO}/commits/${env.GIT_COMMIT}">${URL_REPO}/commits/${env.GIT_COMMIT}</a><br />
                        <strong>Author:</strong> ${COMMIT_AUTHOR_NAME} (${COMMIT_AUTHOR_EMAIL})
                    </p>
                    <p>
                        Tests have been detected that have failed in Etendo RX module and/or DAS test.<br />
                        💡 These tests were run on a Postgres database environment.<br />
                        To more information on the failing run visit:<br />
                        <a href="${env.BUILD_URL}">${env.BUILD_URL}</a>
                    </p>
            __________________________________________________________
            """
        }
        success {
            script {
                sh "./pipelines/utils/build-update.sh ${REPOSITORY_NAME} ${COMMIT_SUCCESS_STATUS} \"Test Finalized Successfully\" ${ACCESS_TOKEN} ${GIT_COMMIT} ${BUILD_URL} \"${CONTEXT_BUILD}\""
                echo "---------------------- DONE ----------------------"
            }
        }
    }
}
